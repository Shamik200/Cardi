package com.example.cardi.View.Screen

//noinspection UsingMaterialAndMaterial3Libraries
import Constants
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.BottomNavigation
import androidx.compose.material.BottomNavigationItem
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.TextField
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Send
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.currentBackStackEntryAsState
import queryHuggingFaceApi

@Composable
fun HomeScreen() {
    Text(
        text = "Home",
        fontSize = 50.sp
    )
}

@Composable
fun SearchScreen(){
    Text(
        text = "Search",
        fontSize = 50.sp
    )
}

@Composable
fun CustomizeScreen() {
//    var inputText by remember { mutableStateOf("") }
//    var chatHistory by remember { mutableStateOf("Welcome to AI Chat!") }
//    var show3DView by remember { mutableStateOf(false) }
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .padding(16.dp)
//    ) {
//        Text(
//            text = "Cardi Chat",
//            style = MaterialTheme.typography.h5,
//            modifier = Modifier.align(Alignment.CenterHorizontally)
//        )
//        Spacer(modifier = Modifier.height(16.dp))
//
//        // Display chat history
//        LazyColumn(
//            modifier = Modifier.weight(1f).fillMaxWidth().verticalScroll(rememberScrollState())
//        ) {
//            items(chatHistory.split("\n")) { message ->
//                Text(text = message)
//            }
//        }
//
//        Spacer(modifier = Modifier.height(16.dp))
//
//        // Chat input and send button
//        Row(
//            modifier = Modifier.fillMaxWidth(),
//            horizontalArrangement = Arrangement.spacedBy(8.dp)
//        ) {
//            TextField(
//                value = inputText,
//                onValueChange = { inputText = it },
//                modifier = Modifier.weight(1f),
//                label = { Text("Type your message") }
//            )
//            IconButton(
//                onClick = {
//                    if (inputText.isNotEmpty()) {
//                        queryHuggingFaceApi(inputText)
//                    }
//                }
//            ) {
//                Icon(imageVector = Icons.Default.Send, contentDescription = "Send")
//            }
//        }
//
//        // Optional 3D view prompt (implement based on AI response)
//        if (show3DView) {
//            // Add code to show 3D model (use your 3D car model view)
//            Text("Show 3D Model")
//        }
//    }

    var res = queryHuggingFaceApi("check this prompt")
    Text(text = "$res")
}

//fun sendChatRequest(input: String, onResponse: (String) -> Unit) {
//    val inputMap = mapOf("inputs" to input)
//
//    RetrofitClient.instance.sendRequest(inputMap).enqueue(object : Callback<HuggingFaceResponse> {
//        override fun onResponse(call: Call<HuggingFaceResponse>, response: Response<HuggingFaceResponse>) {
//            if (response.isSuccessful) {
//                val aiResponse = response.body()?.generated_text ?: "No response"
//                onResponse(aiResponse)
//            } else {
//                onResponse("Failed to get response from AI.")
//            }
//        }
//
//        override fun onFailure(call: Call<HuggingFaceResponse>, t: Throwable) {
//            onResponse("Error: ${t.message}")
//        }
//    })
//}




@Preview
@Composable
fun PrevFunc(){
    CustomizeScreen()
}

//@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun ProfileScreen(){
//    var name: String = ""
//
//    Scaffold {
//        Column(
//            modifier = Modifier.fillMaxSize()
//        ){
//            Row(
//                modifier = Modifier.fillMaxWidth().padding(10.dp),
//                horizontalArrangement = Arrangement.SpaceBetween
//            ){
//                Text(
//                    text = "Cardi",
//                    fontSize = 30.sp
//                )
//                Icon(
//                    imageVector = Icons.Filled.Menu,
//                    contentDescription = "Menu Icon",
//                    modifier = Modifier.size(35.dp),
//                    tint = Color.Black
//                )
//            }
//            Spacer(modifier = Modifier.height(10.dp))
////        Image(
////            painter = painterResource(id = R.drawable.),
////            contentDescription = "Profile Image",
////            modifier = Modifier
////                .size(40.dp)
////                .clip(CircleShape)
////                .border(1.dp, Color.Gray, CircleShape)
////        )
//            Spacer(modifier = Modifier.height(10.dp))
//            Text(
//                text = name,
//                fontSize = 20.sp,
//                fontWeight = FontWeight.Bold,
//                textAlign = TextAlign.Center
//            )
//            Spacer(modifier = Modifier.height(10.dp))
//            Row(
//                modifier = Modifier.fillMaxWidth(),
//                horizontalArrangement = Arrangement.SpaceEvenly
//            ){
//                Text(
//                    text = "Follows",
//                    fontSize = 20.sp
//                )
//                Text(
//                    text = "Followers",
//                    fontSize = 20.sp
//                )
//                Text(
//                    text = "Designs",
//                    fontSize = 20.sp
//                )
//            }
//            Spacer(modifier = Modifier.height(10.dp))
//            Button(
//                onClick = { },
//                modifier = Modifier.height(20.dp)
//            ) {
//                Text(
//                    text = "Favorite"
//                )
//            }
//            Button(
//                onClick = { },
//                modifier = Modifier.height(20.dp)
//            ) {
//                Text(
//                    text = "My Designs"
//                )
//            }
//
//        }
//    }
}

@Composable
fun NavHostContainer(
    navController: NavHostController,
    padding: PaddingValues
){
    NavHost(
        navController = navController,
        startDestination = "home",
        modifier = Modifier.padding(paddingValues = padding),
        builder = {
            composable("home"){
                HomeScreen()
            }
            composable("search"){
                SearchScreen()
            }
            composable("customize"){
                CustomizeScreen()
            }
            composable("profile"){
                ProfileScreen()
            }
        }
    )
}

@Composable
fun BottomNavigationBar(navController: NavHostController){
    BottomNavigation(backgroundColor = Color(0xFFD0BCFF)){
        val navBackStackEntry by navController.currentBackStackEntryAsState()
        val currentRoute = navBackStackEntry?.destination?.route
        Constants.BottomNavItems.forEach{ navItem ->
            BottomNavigationItem(
                selected = currentRoute==navItem.route,
                onClick = {
                    navController.navigate(navItem.route)
                },
                icon = {
                    Icon(imageVector = navItem.icon, contentDescription = navItem.label)
                },
                label = {
                    Text(text = navItem.label)
                },
                alwaysShowLabel = false
            )
        }
    }
}
